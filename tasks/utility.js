// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  module.exports = function(grunt) {
    var constructPromptStr, environmentObj, getVerInfo, promptInputErr, promptNoParam, pushCompressTask, runCustomTasks, setArg, _ret;
    _ret = null;
    environmentObj = {
      test: "test",
      verify: "beta",
      formal: "release"
    };
    grunt.executeCustomTasks = function(arg, arg1, arr) {
      var str;
      str = constructPromptStr();
      _ret = getVerInfo(arg1, arg);
      setArg();
      if (arguments.length === 0) {
        return promptNoParam(arg, arg1, str);
      } else {
        if ((_ret.verName != null) === false) {
          return promptInputErr(arg, arg1, str);
        } else if (isNaN(_ret.verNum)) {
          return promptInputErr(arg, arg1, str);
        } else {
          return runCustomTasks(arr, arg1);
        }
      }
    };
    setArg = function() {
      if (_ret.verName === 'formal') {
        _ret.verName = '';
      }
      grunt.config.set('state', _ret.verName);
      return grunt.config.set('date', _ret.verNum);
    };
    pushCompressTask = function(arr, arg1) {
      if (_ret.verName !== 'test') {
        return arr.push("compress");
      }
    };
    promptInputErr = function(arg, arg1, str) {
      grunt.log.writeln("" + arg + ":" + arg1 + " is not effective to build");
      return grunt.log.writeln("Please type taskName:" + str + ":[ Version_Number ]");
    };
    constructPromptStr = function() {
      var str, val;
      str = '[';
      for (val in environmentObj) {
        str += ' ' + val + ' |';
      }
      str = str.slice(0, str.length - 1) + ']';
      return str;
    };
    promptNoParam = function(arg, arg1, str) {
      return promptInputErr(arg, arg1, str);
    };
    getVerInfo = function(arg1, arg) {
      var verName, verNum;
      verNum = parseInt(arg1);
      verName = environmentObj[arg];
      return {
        verNum: verNum,
        verName: verName
      };
    };
    return runCustomTasks = function(arr, arg1) {
      pushCompressTask(arr, arg1);
      return grunt.task.run(arr);
    };
  };

}).call(this);

/*
//@ sourceMappingURL=utility.map
*/
